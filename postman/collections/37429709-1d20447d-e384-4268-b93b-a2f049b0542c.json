{
	"info": {
		"_postman_id": "ea5ecd61-122c-49a4-aca6-f9f779e22239",
		"name": "changeTask 7.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "37429709-ea5ecd61-122c-49a4-aca6-f9f779e22239"
	},
	"item": [
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5813e8b1-8eea-40e6-9b01-4e6445b0858e",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"task_id\", jsonData.id)",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"pm.test(\"Status code is Created\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"Created\");",
							"});",
							"",
							"pm.test(\"Responce contains text field with text 'some text'\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"pm.test(\"'Content-Type' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Content-Security-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Referrer-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Referrer-Policy\")).to.be.true;",
							"});",
							"",
							"let moment = require('moment');",
							"let expectedDate = moment().utc().seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"let actualDateHeader = pm.response.headers.get('Date');",
							"let actualDate = moment.utc(actualDateHeader).seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"pm.test(\"The date in the header matches the current UTC date\", function () {",
							"    pm.expect(actualDate).to.eql(expectedDate);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c3d6d528-e011-4de4-9827-4b3b7300092a",
						"exec": [
							"pm.sendRequest({",
							"    url: 'http://localhost:8080/api/authenticate',",
							"    method: 'POST',",
							"    header: {",
							"        'Accept': 'application/json, text/plain, */*',",
							"        'Accept-Language': 'en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2',",
							"        'Connection': 'keep-alive',",
							"        'Content-Type': 'application/json',",
							"        'Origin': 'https://sqlverifier-50d286d70656.herokuapp.com',",
							"        'Referer': 'https://sqlverifier-50d286d70656.herokuapp.com/login',",
							"        'Sec-Fetch-Dest': 'empty',",
							"        'Sec-Fetch-Mode': 'cors',",
							"        'Sec-Fetch-Site': 'same-origin',",
							"        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',",
							"        'sec-ch-ua': '\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"',",
							"        'sec-ch-ua-mobile': '?0',",
							"        'sec-ch-ua-platform': '\"macOS\"'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            username: 'adminNew1',",
							"            password: 'adminNew1',",
							"            rememberMe: false",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    if (!err) {",
							"        let jsonData = res.json();",
							"        if (jsonData.id_token) {",
							"            pm.environment.set('token', jsonData.id_token);",
							"        }",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "25ed99f3-1c58-4ee1-b85d-1c6ea11523fc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fef203c2-7ad3-4ee0-83e3-da56f074ec80",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code is OK\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Each item has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.forEach((item, index) => {",
							"        pm.expect(item).to.have.property(\"id\");",
							"        pm.expect(item).to.have.property(\"text\");",
							"        pm.expect(item).to.have.property(\"answer\");",
							"        pm.expect(item).to.have.property(\"title\");",
							"    });",
							"});",
							"",
							"pm.test(\"'Content-Type' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Content-Security-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Permissions-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Permissions-Policy\")).to.be.true;",
							"});",
							"",
							"let moment = require('moment');",
							"let expectedDate = moment().utc().seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"let actualDateHeader = pm.response.headers.get('Date');",
							"let actualDate = moment.utc(actualDateHeader).seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"pm.test(\"The date in the header matches the current UTC date\", function () {",
							"    pm.expect(actualDate).to.eql(expectedDate);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "987877db-f0dd-4fa3-8853-f1a757f0f46f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "176a7409-2dbe-49b5-8405-352a5f740cec",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"task_id\", jsonData.id)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code is OK\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Responce contains text field with text 'some new new text'\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some new new text\");",
							"});",
							"",
							"pm.test(\"'Content-Type' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Content-Security-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Referrer-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Referrer-Policy\")).to.be.true;",
							"});",
							"",
							"let moment = require('moment');",
							"let expectedDate = moment().utc().seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"let actualDateHeader = pm.response.headers.get('Date');",
							"let actualDate = moment.utc(actualDateHeader).seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"pm.test(\"The date in the header matches the current UTC date\", function () {",
							"    pm.expect(actualDate).to.eql(expectedDate);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "1ec3ab35-f393-4516-967b-dcad5d1b7e69",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{task_id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04576ada-6c4a-48a4-9fb5-282d369b365f",
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Status code is OK\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"",
							"pm.test(\"Response contains correct task_id\", function () {",
							"    pm.expect(jsonData.id).to.eql(Number(pm.variables.get(\"task_id\")));",
							"});",
							"",
							"pm.test(\"'Content-Type' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Content-Security-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;",
							"});",
							"",
							"pm.test(\"'Referrer-Policy' header is present\", function () {",
							"    pm.expect(pm.response.headers.has(\"Referrer-Policy\")).to.be.true;",
							"});",
							"",
							"let moment = require('moment');",
							"let expectedDate = moment().utc().seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"let actualDateHeader = pm.response.headers.get('Date');",
							"let actualDate = moment.utc(actualDateHeader).seconds(0).milliseconds(0).format('ddd, DD MMM YYYY HH:mm');",
							"pm.test(\"The date in the header matches the current UTC date\", function () {",
							"    pm.expect(actualDate).to.eql(expectedDate);",
							"});",
							"",
							"",
							"const taskId = pm.response.json().id;",
							"",
							"if (taskId) {",
							"    pm.sendRequest({",
							"        url: `http://localhost:8080/api/tasks/${taskId}`,",
							"        method: 'DELETE',",
							"        header: {",
							"            'Authorization': `Bearer ${pm.environment.get('token')}`,",
							"            'Accept': '*/*'",
							"        }",
							"    }, function (err, res) {",
							"        if (err || res.code !== 204) {",
							"            throw new Error(\"Failed to delete task with ID: \" + taskId);",
							"        }",
							"    });",
							"} else {",
							"    throw new Error(\"No task ID found in response, cannot delete.\");",
							"}",
							"",
							"",
							"",
							"",
							"pm.environment.unset(\"token\");",
							"pm.environment.unset(\"task_id\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"id": "ff2089f3-3a91-4790-9108-b2dbc228d8a9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "d0547d27-26c7-49de-82de-b9fdc837aa5e"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "ca164fcf-dfb1-43a3-a7df-f6ed46cfda83"
			}
		}
	]
}